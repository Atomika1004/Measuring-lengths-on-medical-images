{\rtf1\ansi\ansicpg1251\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include "mainwindow.h"\
#include "./ui_mainwindow.h"\
#include <QFileDialog>\
#include <QMouseEvent>\
#include <QPainter>\
#include <cmath>\
#include <QLineEdit>\
#include <QMessageBox>\
using namespace std;\
MainWindow::MainWindow(QWidget *parent)\
    : QMainWindow(parent)\
    , ui(new Ui::MainWindow)\
\{\
    ui->setupUi(this);\
    ui->label->installEventFilter(this);\
    setMouseTracking(true);\
    sizeLine = new SizeLine();\
    colorLine = new ColorLine();\
\}\
\
MainWindow::~MainWindow()\
\{\
    delete ui;\
\}\
\
void MainWindow::paintEvent(QPaintEvent *event)\
\{\
    QMainWindow::paintEvent(event);\
\
    QPainter painter(this);\
\
    QPixmap scaledImage = currentImage.scaled(ui->label->size(), Qt::KeepAspectRatio);\
    painter.drawPixmap(ui->label->geometry().topLeft(), scaledImage);\
\
    for (const auto& line : lines)\
    \{\
        QPen pen(currentLineColor);\
        if (sizeLine->isRadioButtonActive())\
        \{\
            pen.setWidth(sizeLine->getCurrentLineWidth());\
        \}\
        else\
        \{\
            pen.setWidth(2);\
        \}\
\
        painter.setPen(pen);\
\
        QPoint scaledStart(line.start.x() * scaledImage.width() / currentImage.width(),\
                           line.start.y() * scaledImage.height() / currentImage.height());\
\
        QPoint scaledEnd(line.end.x() * scaledImage.width() / currentImage.width(),\
                         line.end.y() * scaledImage.height() / currentImage.height());\
\
        painter.drawLine(scaledStart, scaledEnd);\
\
        double angle = atan2(line.end.y() - line.start.y(), line.end.x() - line.start.x());\
\
        int tickLength = 5;\
\
        QPoint tick1Start(scaledEnd.x() - tickLength * cos(angle + M_PI / 2),\
                          scaledEnd.y() - tickLength * sin(angle + M_PI / 2));\
\
        QPoint tick1End(scaledEnd.x() + tickLength * cos(angle + M_PI / 2),\
                        scaledEnd.y() + tickLength * sin(angle + M_PI / 2));\
\
        QPoint tick2Start(scaledStart.x() - tickLength * cos(angle + M_PI / 2),\
                          scaledStart.y() - tickLength * sin(angle + M_PI / 2));\
\
        QPoint tick2End(scaledStart.x() + tickLength * cos(angle + M_PI / 2),\
                        scaledStart.y() + tickLength * sin(angle + M_PI / 2));\
\
        painter.drawLine(tick1Start, tick1End);\
        painter.drawLine(tick2Start, tick2End);\
\
        QPoint midPoint((scaledStart.x() + scaledEnd.x()) / 2, (scaledStart.y() + scaledEnd.y()) / 2);\
        QString distanceText = QString::number(calculateDistance(line.start, line.end,true));\
\
        painter.drawText(midPoint.x(), midPoint.y() - 5, distanceText);\
    \}\
    if (ui->checkBox->isChecked()) \{\
        drawGrid(painter, scaledImage.width(), scaledImage.height());\
    \}\
    update();\
\}\
\
int MainWindow::calculateDistance(const QPoint& p1, const QPoint& p2, bool useLineEditValue)\
\{\
    int dx = p2.x() - p1.x();\
    int dy = p2.y() - p1.y();\
\
    if (useLineEditValue) \{\
        bool ok;\
        int multiplier = ui->lineEdit->text().toInt(&ok);\
\
        if (!ok || ui->lineEdit->text().isEmpty() || multiplier == 0 ) \{\
            multiplier = 1;\
        \}\
\
\
        return sqrt(dx * dx + dy * dy) * multiplier;\
    \}\
\
    return sqrt(dx * dx + dy * dy);\
\}\
\
void MainWindow::mousePressEvent(QMouseEvent *event)\
\{\
    currentLine.start = event->pos();\
    currentLine.end = event->pos();\
    update();\
\}\
\
void MainWindow::mouseMoveEvent(QMouseEvent *event)\
\{\
    currentLine.end = event->pos();\
\
    update();\
\}\
\
void MainWindow::mouseReleaseEvent(QMouseEvent *event)\
\{\
    lines.append(currentLine);\
\
    update();\
\}\
\
bool MainWindow::eventFilter(QObject *obj, QEvent *event)\
\{\
    if (obj == ui->label && event->type() == QEvent::Resize)\
    \{\
        update();\
    \}\
    return QMainWindow::eventFilter(obj, event);\
\}\
\
void MainWindow::on_pushButton_clicked()\
\{\
    QString inagePath = QFileDialog::getOpenFileName(this, "\uc0\u1042 \u1099 \u1073 \u1088 \u1072 \u1090 \u1100  \u1092 \u1072 \u1081 \u1083 ", "/Users/atomika/Documents/Waves", "All files (*.jpg)");\
    currentImage.load(inagePath);\
    currentImage = currentImage.scaled(ui->label->size(), Qt::KeepAspectRatio);\
    lines.clear();\
    update();\
\}\
\
void MainWindow::on_pushButton_2_clicked()\
\{\
    lines.clear();\
\}\
\
void MainWindow::on_pushButton_3_clicked()\
\{\
    QPixmap snapshot(this->size());\
    this->render(&snapshot);\
    QString fileName = "screenshot_" + QDateTime::currentDateTime().toString("yyyyMMdd_hhmmss") + ".png";\
    QString filePath = QFileDialog::getSaveFileName(this, tr("Save Screenshot"), fileName, tr("Images (*.png)"));\
    if (!filePath.isEmpty()) \{\
        snapshot.save(filePath);\
    \}\
\
\}\
\
void MainWindow::on_checkBox_toggled(bool checked)\
\{\
    //update();\
\}\
\
void MainWindow::drawGrid(QPainter& painter, int imageWidth, int imageHeight)\
\{\
    // \uc0\u1048 \u1085 \u1090 \u1077 \u1088 \u1074 \u1072 \u1083  \u1084 \u1077 \u1078 \u1076 \u1091  \u1083 \u1080 \u1085 \u1080 \u1103 \u1084 \u1080  \u1089 \u1077 \u1090 \u1082 \u1080 \
    int gridSize = 20;\
\
    // \uc0\u1062 \u1074 \u1077 \u1090  \u1083 \u1080 \u1085 \u1080 \u1081  \u1089 \u1077 \u1090 \u1082 \u1080 \
    QPen gridPen(QColor(128, 128, 128, 128));\
    gridPen.setWidth(1);  // \uc0\u1058 \u1086 \u1083 \u1097 \u1080 \u1085 \u1072  \u1083 \u1080 \u1085 \u1080 \u1081 \
\
    painter.setPen(gridPen);\
\
    // \uc0\u1056 \u1080 \u1089 \u1091 \u1077 \u1084  \u1075 \u1086 \u1088 \u1080 \u1079 \u1086 \u1085 \u1090 \u1072 \u1083 \u1100 \u1085 \u1099 \u1077  \u1083 \u1080 \u1085 \u1080 \u1080 \
    for (int y = gridSize; y < imageHeight; y += gridSize)\
    \{\
        painter.drawLine(0, y, imageWidth, y);\
    \}\
\
    // \uc0\u1056 \u1080 \u1089 \u1091 \u1077 \u1084  \u1074 \u1077 \u1088 \u1090 \u1080 \u1082 \u1072 \u1083 \u1100 \u1085 \u1099 \u1077  \u1083 \u1080 \u1085 \u1080 \u1080 \
    for (int x = gridSize; x < imageWidth; x += gridSize)\
    \{\
        painter.drawLine(x, 0, x, imageHeight);\
    \}\
\}\
\
\
void MainWindow::on_action_triggered()\
\{\
\
    QMessageBox msgBox;\
    QPixmap iconPixmap("/Users/atomika/Documents/Waves/image.png");\
    msgBox.setIconPixmap(iconPixmap);\
\
    msgBox.setWindowTitle("\uc0\u1056 \u1091 \u1082 \u1086 \u1074 \u1086 \u1076 \u1089 \u1090 \u1074 \u1086  \u1076 \u1083 \u1103  \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1103 ");\
    msgBox.setText("\uc0\u1055 \u1088 \u1080 \u1083 \u1086 \u1078 \u1077 \u1085 \u1080 \u1077 , \u1087 \u1086 \u1079 \u1074 \u1086 \u1083 \u1103 \u1102 \u1097 \u1077 \u1077  \u1074 \u1088 \u1072 \u1095 \u1072 \u1084  \u1080  \u1089 \u1087 \u1077 \u1094 \u1080 \u1072 \u1083 \u1080 \u1089 \u1090 \u1072 \u1084  \u1080 \u1079 \u1084 \u1077 \u1088 \u1103 \u1090 \u1100  \u1076 \u1083 \u1080 \u1085 \u1099  \u1085 \u1072  \u1080 \u1079 \u1086 \u1073 \u1088 \u1072 \u1078 \u1077 \u1085 \u1080 \u1103 \u1093  \u1089  \u1074 \u1099 \u1089 \u1086 \u1082 \u1086 \u1081  \u1090 \u1086 \u1095 \u1085 \u1086 \u1089 \u1090 \u1100 \u1102 . \u1055 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1103 \u1084  \u1087 \u1088 \u1077 \u1076 \u1086 \u1089 \u1090 \u1072 \u1074 \u1083 \u1103 \u1077 \u1090 \u1089 \u1103  \u1074 \u1086 \u1079 \u1084 \u1086 \u1078 \u1085 \u1086 \u1089 \u1090 \u1100  \u1089 \u1086 \u1079 \u1076 \u1072 \u1074 \u1072 \u1090 \u1100  \u1086 \u1090 \u1088 \u1077 \u1079 \u1082 \u1080 , \u1087 \u1088 \u1077 \u1076 \u1089 \u1090 \u1072 \u1074 \u1083 \u1103 \u1102 \u1097 \u1080 \u1077  \u1080 \u1079 \u1084 \u1077 \u1088 \u1103 \u1077 \u1084 \u1091 \u1102  \u1083 \u1080 \u1085 \u1077 \u1081 \u1082 \u1091 , \u1091 \u1082 \u1072 \u1079 \u1099 \u1074 \u1072 \u1103  \u1085 \u1072 \u1095 \u1072 \u1083 \u1100 \u1085 \u1091 \u1102  \u1080  \u1082 \u1086 \u1085 \u1077 \u1095 \u1085 \u1091 \u1102  \u1090 \u1086 \u1095 \u1082 \u1080  \u1085 \u1072  \u1080 \u1079 \u1086 \u1073 \u1088 \u1072 \u1078 \u1077 \u1085 \u1080 \u1080 . \u1044 \u1083 \u1080 \u1085 \u1072  \u1086 \u1090 \u1088 \u1077 \u1079 \u1082 \u1072  \u1080 \u1079 \u1084 \u1077 \u1088 \u1103 \u1077 \u1090 \u1089 \u1103  \u1074  \u1087 \u1080 \u1082 \u1089 \u1077 \u1083 \u1103 \u1093  \u1080  \u1079 \u1072 \u1090 \u1077 \u1084  \u1082 \u1086 \u1085 \u1074 \u1077 \u1088 \u1090 \u1080 \u1088 \u1091 \u1077 \u1090 \u1089 \u1103  \u1074  \u1084 \u1080 \u1083 \u1083 \u1080 \u1084 \u1077 \u1090 \u1088 \u1099  \u1089  \u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1085 \u1080 \u1077 \u1084  \u1087 \u1086 \u1083 \u1100 \u1079 \u1086 \u1074 \u1072 \u1090 \u1077 \u1083 \u1100 \u1089 \u1082 \u1080  \u1079 \u1072 \u1076 \u1072 \u1074 \u1072 \u1077 \u1084 \u1086 \u1075 \u1086  \u1082 \u1086 \u1101 \u1092 \u1092 \u1080 \u1094 \u1080 \u1077 \u1085 \u1090 \u1072 .");\
\
    msgBox.addButton(QMessageBox::Ok);\
    msgBox.addButton(QMessageBox::Cancel);\
\
    msgBox.exec();\
\}\
\
void MainWindow::on_action_2_triggered()\
\{\
    QMessageBox msgBox;\
    QPixmap iconPixmap("/Users/atomika/Documents/Waves/image1.png");\
    msgBox.setIconPixmap(iconPixmap);\
\
    msgBox.setWindowTitle("\uc0\u1057 \u1087 \u1088 \u1072 \u1074 \u1082 \u1072 ");\
    msgBox.setText("\uc0\u1040 \u1074 \u1090 \u1086 \u1088  \u1089 \u1090 \u1086 \u1083 \u1100  \u1095 \u1091 \u1076 \u1077 \u1089 \u1085 \u1086 \u1081  \u1087 \u1088 \u1086 \u1075 \u1088 \u1072 \u1084 \u1084 \u1099  - \u1040 \u1083 \u1077 \u1082 \u1089 \u1077 \u1081  \u1055 \u1086 \u1087 \u1086 \u1074 . \u1057 \u1090 \u1091 \u1076 \u1077 \u1085 \u1090  \u1075 \u1088 \u1091 \u1087 \u1087 \u1099  \u1073 \u1048 \u1042 \u1058 -223");\
\
    msgBox.addButton(QMessageBox::Ok);\
    msgBox.addButton(QMessageBox::Cancel);\
\
    msgBox.exec();\
\}\
\
void MainWindow::updateLineWidth(int newLineWidth)\
\{\
    currentLineWidth = newLineWidth;\
\}\
\
void MainWindow::on_action_3_triggered()\
\{\
    sizeLine->setWindowTitle("\uc0\u1058 \u1086 \u1083 \u1097 \u1080 \u1085 \u1072  \u1083 \u1080 \u1085 \u1077 \u1081 \u1082 \u1080 ");\
    sizeLine->show();\
    connect(sizeLine, &SizeLine::lineWidthChanged, this, &MainWindow::updateLineWidth);\
\}\
\
void MainWindow:: onLineColorChanged(const QColor& newColor)\
\{\
    currentLineColor = newColor;\
\}\
void MainWindow::on_action_4_triggered()\
\{\
    colorLine->setWindowTitle("\uc0\u1062 \u1074 \u1077 \u1090  \u1083 \u1080 \u1085 \u1077 \u1081 \u1082 \u1080 ");\
    colorLine->show();\
    connect(colorLine, &ColorLine::colorChanged, this, &MainWindow::onLineColorChanged);\
\}\
\
\
\
}